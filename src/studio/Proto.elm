module Studio.Proto exposing (..)

-- DO NOT EDIT
-- AUTOGENERATED BY THE ELM PROTOCOL BUFFER COMPILER
-- https://github.com/tiziano88/elm-protobuf
-- source file: vendor/studio_proto3/studio.proto

import Protobuf exposing (..)

import Json.Decode as JD
import Json.Encode as JE


type BandKind
    = BkDefault -- 0
    | BkBase -- 1
    | BkCover -- 2
    | BkEducation -- 3


bandKindDecoder : JD.Decoder BandKind
bandKindDecoder =
    let
        lookup s =
            case s of
                "BK_default" ->
                    BkDefault

                "BK_base" ->
                    BkBase

                "BK_cover" ->
                    BkCover

                "BK_education" ->
                    BkEducation

                _ ->
                    BkDefault
    in
        JD.map lookup JD.string


bandKindDefault : BandKind
bandKindDefault = BkDefault


bandKindEncoder : BandKind -> JE.Value
bandKindEncoder v =
    let
        lookup s =
            case s of
                BkDefault ->
                    "BK_default"

                BkBase ->
                    "BK_base"

                BkCover ->
                    "BK_cover"

                BkEducation ->
                    "BK_education"

    in
        JE.string <| lookup v


type WeekDay
    = WdDefault -- 0
    | Wd1 -- 1
    | Wd2 -- 2
    | Wd3 -- 3
    | Wd4 -- 4
    | Wd5 -- 5
    | Wd6 -- 6
    | Wd7 -- 7


weekDayDecoder : JD.Decoder WeekDay
weekDayDecoder =
    let
        lookup s =
            case s of
                "WD_default" ->
                    WdDefault

                "WD_1" ->
                    Wd1

                "WD_2" ->
                    Wd2

                "WD_3" ->
                    Wd3

                "WD_4" ->
                    Wd4

                "WD_5" ->
                    Wd5

                "WD_6" ->
                    Wd6

                "WD_7" ->
                    Wd7

                _ ->
                    WdDefault
    in
        JD.map lookup JD.string


weekDayDefault : WeekDay
weekDayDefault = WdDefault


weekDayEncoder : WeekDay -> JE.Value
weekDayEncoder v =
    let
        lookup s =
            case s of
                WdDefault ->
                    "WD_default"

                Wd1 ->
                    "WD_1"

                Wd2 ->
                    "WD_2"

                Wd3 ->
                    "WD_3"

                Wd4 ->
                    "WD_4"

                Wd5 ->
                    "WD_5"

                Wd6 ->
                    "WD_6"

                Wd7 ->
                    "WD_7"

    in
        JE.string <| lookup v


type TransactionKind
    = TkBandRoom -- 0
    | TkBandInstrument -- 1
    | TkBandDeposit -- 2
    | TkBandPunishment -- 3
    | TkWageBase -- 4
    | TkWageBonus -- 5
    | TkWagePunishment -- 6
    | TkRent -- 7
    | TkBuy -- 8
    | TkRepair -- 9
    | TkSell -- 10
    | TkBonus -- 11


transactionKindDecoder : JD.Decoder TransactionKind
transactionKindDecoder =
    let
        lookup s =
            case s of
                "TK_band_room" ->
                    TkBandRoom

                "TK_band_instrument" ->
                    TkBandInstrument

                "TK_band_deposit" ->
                    TkBandDeposit

                "TK_band_punishment" ->
                    TkBandPunishment

                "TK_wage_base" ->
                    TkWageBase

                "TK_wage_bonus" ->
                    TkWageBonus

                "TK_wage_punishment" ->
                    TkWagePunishment

                "TK_rent" ->
                    TkRent

                "TK_buy" ->
                    TkBuy

                "TK_repair" ->
                    TkRepair

                "TK_sell" ->
                    TkSell

                "TK_bonus" ->
                    TkBonus

                _ ->
                    TkBandRoom
    in
        JD.map lookup JD.string


transactionKindDefault : TransactionKind
transactionKindDefault = TkBandRoom


transactionKindEncoder : TransactionKind -> JE.Value
transactionKindEncoder v =
    let
        lookup s =
            case s of
                TkBandRoom ->
                    "TK_band_room"

                TkBandInstrument ->
                    "TK_band_instrument"

                TkBandDeposit ->
                    "TK_band_deposit"

                TkBandPunishment ->
                    "TK_band_punishment"

                TkWageBase ->
                    "TK_wage_base"

                TkWageBonus ->
                    "TK_wage_bonus"

                TkWagePunishment ->
                    "TK_wage_punishment"

                TkRent ->
                    "TK_rent"

                TkBuy ->
                    "TK_buy"

                TkRepair ->
                    "TK_repair"

                TkSell ->
                    "TK_sell"

                TkBonus ->
                    "TK_bonus"

    in
        JE.string <| lookup v


type SessionStatus
    = SsAwaitingLast -- 0
    | SsAwaitingFirst -- 1
    | SsClosedAuto -- 2
    | SsClosedOk -- 3
    | SsCanceledSoft -- 4
    | SsCanceledHard -- 5


sessionStatusDecoder : JD.Decoder SessionStatus
sessionStatusDecoder =
    let
        lookup s =
            case s of
                "SS_awaiting_last" ->
                    SsAwaitingLast

                "SS_awaiting_first" ->
                    SsAwaitingFirst

                "SS_closed_auto" ->
                    SsClosedAuto

                "SS_closed_ok" ->
                    SsClosedOk

                "SS_canceled_soft" ->
                    SsCanceledSoft

                "SS_canceled_hard" ->
                    SsCanceledHard

                _ ->
                    SsAwaitingLast
    in
        JD.map lookup JD.string


sessionStatusDefault : SessionStatus
sessionStatusDefault = SsAwaitingLast


sessionStatusEncoder : SessionStatus -> JE.Value
sessionStatusEncoder v =
    let
        lookup s =
            case s of
                SsAwaitingLast ->
                    "SS_awaiting_last"

                SsAwaitingFirst ->
                    "SS_awaiting_first"

                SsClosedAuto ->
                    "SS_closed_auto"

                SsClosedOk ->
                    "SS_closed_ok"

                SsCanceledSoft ->
                    "SS_canceled_soft"

                SsCanceledHard ->
                    "SS_canceled_hard"

    in
        JE.string <| lookup v


type SessionOrderedBy
    = SoAuto -- 0
    | SoAdmin -- 1
    | SoSelf -- 2


sessionOrderedByDecoder : JD.Decoder SessionOrderedBy
sessionOrderedByDecoder =
    let
        lookup s =
            case s of
                "SO_auto" ->
                    SoAuto

                "SO_admin" ->
                    SoAdmin

                "SO_self" ->
                    SoSelf

                _ ->
                    SoAuto
    in
        JD.map lookup JD.string


sessionOrderedByDefault : SessionOrderedBy
sessionOrderedByDefault = SoAuto


sessionOrderedByEncoder : SessionOrderedBy -> JE.Value
sessionOrderedByEncoder v =
    let
        lookup s =
            case s of
                SoAuto ->
                    "SO_auto"

                SoAdmin ->
                    "SO_admin"

                SoSelf ->
                    "SO_self"

    in
        JE.string <| lookup v


type CMD
    = CmdGetState -- 0
    | CmdPing -- 1
    | CmdNewSession -- 2
    | CmdEditSession -- 3
    | CmdBandNewEdit -- 4
    | CmdBandDisable -- 5
    | CmdWeekTemplateNewEdit -- 6
    | CmdWeekTemplateDisable -- 7
    | CmdWeekTemplateNewEditFromSession -- 8
    | CmdStatistics -- 9
    | CmdNewTransaction -- 10


cMDDecoder : JD.Decoder CMD
cMDDecoder =
    let
        lookup s =
            case s of
                "CMD_get_state" ->
                    CmdGetState

                "CMD_ping" ->
                    CmdPing

                "CMD_new_session" ->
                    CmdNewSession

                "CMD_edit_session" ->
                    CmdEditSession

                "CMD_band_new_edit" ->
                    CmdBandNewEdit

                "CMD_band_disable" ->
                    CmdBandDisable

                "CMD_week_template_new_edit" ->
                    CmdWeekTemplateNewEdit

                "CMD_week_template_disable" ->
                    CmdWeekTemplateDisable

                "CMD_week_template_new_edit_from_session" ->
                    CmdWeekTemplateNewEditFromSession

                "CMD_statistics" ->
                    CmdStatistics

                "CMD_new_transaction" ->
                    CmdNewTransaction

                _ ->
                    CmdGetState
    in
        JD.map lookup JD.string


cMDDefault : CMD
cMDDefault = CmdGetState


cMDEncoder : CMD -> JE.Value
cMDEncoder v =
    let
        lookup s =
            case s of
                CmdGetState ->
                    "CMD_get_state"

                CmdPing ->
                    "CMD_ping"

                CmdNewSession ->
                    "CMD_new_session"

                CmdEditSession ->
                    "CMD_edit_session"

                CmdBandNewEdit ->
                    "CMD_band_new_edit"

                CmdBandDisable ->
                    "CMD_band_disable"

                CmdWeekTemplateNewEdit ->
                    "CMD_week_template_new_edit"

                CmdWeekTemplateDisable ->
                    "CMD_week_template_disable"

                CmdWeekTemplateNewEditFromSession ->
                    "CMD_week_template_new_edit_from_session"

                CmdStatistics ->
                    "CMD_statistics"

                CmdNewTransaction ->
                    "CMD_new_transaction"

    in
        JE.string <| lookup v


type ClientKind
    = CkSuperadmin -- 0
    | CkAdmin -- 1
    | CkObserver -- 2


clientKindDecoder : JD.Decoder ClientKind
clientKindDecoder =
    let
        lookup s =
            case s of
                "CK_superadmin" ->
                    CkSuperadmin

                "CK_admin" ->
                    CkAdmin

                "CK_observer" ->
                    CkObserver

                _ ->
                    CkSuperadmin
    in
        JD.map lookup JD.string


clientKindDefault : ClientKind
clientKindDefault = CkSuperadmin


clientKindEncoder : ClientKind -> JE.Value
clientKindEncoder v =
    let
        lookup s =
            case s of
                CkSuperadmin ->
                    "CK_superadmin"

                CkAdmin ->
                    "CK_admin"

                CkObserver ->
                    "CK_observer"

    in
        JE.string <| lookup v


type ResponseStatus
    = RsOkState -- 0
    | RsOkVoid -- 1
    | RsError -- 2
    | RsNotice -- 3
    | RsRefresh -- 4
    | RsInfo -- 5
    | RsWarn -- 6
    | RsStatistics -- 7


responseStatusDecoder : JD.Decoder ResponseStatus
responseStatusDecoder =
    let
        lookup s =
            case s of
                "RS_ok_state" ->
                    RsOkState

                "RS_ok_void" ->
                    RsOkVoid

                "RS_error" ->
                    RsError

                "RS_notice" ->
                    RsNotice

                "RS_refresh" ->
                    RsRefresh

                "RS_info" ->
                    RsInfo

                "RS_warn" ->
                    RsWarn

                "RS_statistics" ->
                    RsStatistics

                _ ->
                    RsOkState
    in
        JD.map lookup JD.string


responseStatusDefault : ResponseStatus
responseStatusDefault = RsOkState


responseStatusEncoder : ResponseStatus -> JE.Value
responseStatusEncoder v =
    let
        lookup s =
            case s of
                RsOkState ->
                    "RS_ok_state"

                RsOkVoid ->
                    "RS_ok_void"

                RsError ->
                    "RS_error"

                RsNotice ->
                    "RS_notice"

                RsRefresh ->
                    "RS_refresh"

                RsInfo ->
                    "RS_info"

                RsWarn ->
                    "RS_warn"

                RsStatistics ->
                    "RS_statistics"

    in
        JE.string <| lookup v


type alias Contacts =
    { phones : List String -- 1
    , mails : List String -- 2
    , social : List String -- 3
    , other : List String -- 4
    }


contactsDecoder : JD.Decoder Contacts
contactsDecoder =
    JD.lazy <| \_ -> decode Contacts
        |> repeated "phones" JD.string
        |> repeated "mails" JD.string
        |> repeated "social" JD.string
        |> repeated "other" JD.string


contactsEncoder : Contacts -> JE.Value
contactsEncoder v =
    JE.object <| List.filterMap identity <|
        [ (repeatedFieldEncoder "phones" JE.string v.phones)
        , (repeatedFieldEncoder "mails" JE.string v.mails)
        , (repeatedFieldEncoder "social" JE.string v.social)
        , (repeatedFieldEncoder "other" JE.string v.other)
        ]


type alias Admin =
    { id : Int -- 1
    , name : String -- 2
    , contacts : Maybe Contacts -- 3
    , login : String -- 4
    , password : String -- 5
    , enabled : Bool -- 6
    , stamp : Int -- 7
    }


adminDecoder : JD.Decoder Admin
adminDecoder =
    JD.lazy <| \_ -> decode Admin
        |> required "id" JD.int 0
        |> required "name" JD.string ""
        |> optional "contacts" contactsDecoder
        |> required "login" JD.string ""
        |> required "password" JD.string ""
        |> required "enabled" JD.bool False
        |> required "stamp" JD.int 0


adminEncoder : Admin -> JE.Value
adminEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "id" JE.int 0 v.id)
        , (requiredFieldEncoder "name" JE.string "" v.name)
        , (optionalEncoder "contacts" contactsEncoder v.contacts)
        , (requiredFieldEncoder "login" JE.string "" v.login)
        , (requiredFieldEncoder "password" JE.string "" v.password)
        , (requiredFieldEncoder "enabled" JE.bool False v.enabled)
        , (requiredFieldEncoder "stamp" JE.int 0 v.stamp)
        ]


type alias Location =
    { id : Int -- 1
    , name : String -- 2
    , description : String -- 3
    , enabled : Bool -- 4
    , stamp : Int -- 5
    }


locationDecoder : JD.Decoder Location
locationDecoder =
    JD.lazy <| \_ -> decode Location
        |> required "id" JD.int 0
        |> required "name" JD.string ""
        |> required "description" JD.string ""
        |> required "enabled" JD.bool False
        |> required "stamp" JD.int 0


locationEncoder : Location -> JE.Value
locationEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "id" JE.int 0 v.id)
        , (requiredFieldEncoder "name" JE.string "" v.name)
        , (requiredFieldEncoder "description" JE.string "" v.description)
        , (requiredFieldEncoder "enabled" JE.bool False v.enabled)
        , (requiredFieldEncoder "stamp" JE.int 0 v.stamp)
        ]


type alias Room =
    { id : Int -- 1
    , name : String -- 2
    , locationId : Int -- 3
    , color : String -- 4
    , description : String -- 5
    , priceBase : Int -- 6
    , enabled : Bool -- 7
    , stamp : Int -- 8
    }


roomDecoder : JD.Decoder Room
roomDecoder =
    JD.lazy <| \_ -> decode Room
        |> required "id" JD.int 0
        |> required "name" JD.string ""
        |> required "locationId" JD.int 0
        |> required "color" JD.string ""
        |> required "description" JD.string ""
        |> required "priceBase" JD.int 0
        |> required "enabled" JD.bool False
        |> required "stamp" JD.int 0


roomEncoder : Room -> JE.Value
roomEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "id" JE.int 0 v.id)
        , (requiredFieldEncoder "name" JE.string "" v.name)
        , (requiredFieldEncoder "locationId" JE.int 0 v.locationId)
        , (requiredFieldEncoder "color" JE.string "" v.color)
        , (requiredFieldEncoder "description" JE.string "" v.description)
        , (requiredFieldEncoder "priceBase" JE.int 0 v.priceBase)
        , (requiredFieldEncoder "enabled" JE.bool False v.enabled)
        , (requiredFieldEncoder "stamp" JE.int 0 v.stamp)
        ]


type alias DiscountConst =
    { id : Int -- 1
    , roomId : Int -- 2
    , bandKind : BandKind -- 3
    , numberFrom : Int -- 4
    , minFrom : Int -- 5
    , weekDay : WeekDay -- 6
    , amount : Int -- 7
    , fixprice : Bool -- 8
    , stamp : Int -- 9
    }


discountConstDecoder : JD.Decoder DiscountConst
discountConstDecoder =
    JD.lazy <| \_ -> decode DiscountConst
        |> required "id" JD.int 0
        |> required "roomId" JD.int 0
        |> required "bandKind" bandKindDecoder bandKindDefault
        |> required "numberFrom" JD.int 0
        |> required "minFrom" JD.int 0
        |> required "weekDay" weekDayDecoder weekDayDefault
        |> required "amount" JD.int 0
        |> required "fixprice" JD.bool False
        |> required "stamp" JD.int 0


discountConstEncoder : DiscountConst -> JE.Value
discountConstEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "id" JE.int 0 v.id)
        , (requiredFieldEncoder "roomId" JE.int 0 v.roomId)
        , (requiredFieldEncoder "bandKind" bandKindEncoder bandKindDefault v.bandKind)
        , (requiredFieldEncoder "numberFrom" JE.int 0 v.numberFrom)
        , (requiredFieldEncoder "minFrom" JE.int 0 v.minFrom)
        , (requiredFieldEncoder "weekDay" weekDayEncoder weekDayDefault v.weekDay)
        , (requiredFieldEncoder "amount" JE.int 0 v.amount)
        , (requiredFieldEncoder "fixprice" JE.bool False v.fixprice)
        , (requiredFieldEncoder "stamp" JE.int 0 v.stamp)
        ]


type alias Instrument =
    { id : Int -- 1
    , name : String -- 2
    , locationId : Int -- 3
    , description : String -- 4
    , price : Int -- 5
    , enabled : Bool -- 6
    , stamp : Int -- 7
    }


instrumentDecoder : JD.Decoder Instrument
instrumentDecoder =
    JD.lazy <| \_ -> decode Instrument
        |> required "id" JD.int 0
        |> required "name" JD.string ""
        |> required "locationId" JD.int 0
        |> required "description" JD.string ""
        |> required "price" JD.int 0
        |> required "enabled" JD.bool False
        |> required "stamp" JD.int 0


instrumentEncoder : Instrument -> JE.Value
instrumentEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "id" JE.int 0 v.id)
        , (requiredFieldEncoder "name" JE.string "" v.name)
        , (requiredFieldEncoder "locationId" JE.int 0 v.locationId)
        , (requiredFieldEncoder "description" JE.string "" v.description)
        , (requiredFieldEncoder "price" JE.int 0 v.price)
        , (requiredFieldEncoder "enabled" JE.bool False v.enabled)
        , (requiredFieldEncoder "stamp" JE.int 0 v.stamp)
        ]


type alias Stuff2Sell =
    { id : Int -- 1
    , name : String -- 2
    , locationId : Int -- 3
    , description : String -- 4
    , quantity : Int -- 5
    , price : Int -- 6
    , enabled : Bool -- 7
    , stamp : Int -- 8
    }


stuff2SellDecoder : JD.Decoder Stuff2Sell
stuff2SellDecoder =
    JD.lazy <| \_ -> decode Stuff2Sell
        |> required "id" JD.int 0
        |> required "name" JD.string ""
        |> required "locationId" JD.int 0
        |> required "description" JD.string ""
        |> required "quantity" JD.int 0
        |> required "price" JD.int 0
        |> required "enabled" JD.bool False
        |> required "stamp" JD.int 0


stuff2SellEncoder : Stuff2Sell -> JE.Value
stuff2SellEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "id" JE.int 0 v.id)
        , (requiredFieldEncoder "name" JE.string "" v.name)
        , (requiredFieldEncoder "locationId" JE.int 0 v.locationId)
        , (requiredFieldEncoder "description" JE.string "" v.description)
        , (requiredFieldEncoder "quantity" JE.int 0 v.quantity)
        , (requiredFieldEncoder "price" JE.int 0 v.price)
        , (requiredFieldEncoder "enabled" JE.bool False v.enabled)
        , (requiredFieldEncoder "stamp" JE.int 0 v.stamp)
        ]


type alias Transaction =
    { id : Int -- 1
    , kind : TransactionKind -- 2
    , subjectId : Int -- 3
    , subjectQuantity : Int -- 4
    , amount : Int -- 5
    , cashIn : Int -- 6
    , cashOut : Int -- 7
    , description : String -- 8
    , adminId : Int -- 9
    , stamp : Int -- 10
    , locationId : Int -- 11
    }


transactionDecoder : JD.Decoder Transaction
transactionDecoder =
    JD.lazy <| \_ -> decode Transaction
        |> required "id" JD.int 0
        |> required "kind" transactionKindDecoder transactionKindDefault
        |> required "subjectId" JD.int 0
        |> required "subjectQuantity" JD.int 0
        |> required "amount" JD.int 0
        |> required "cashIn" JD.int 0
        |> required "cashOut" JD.int 0
        |> required "description" JD.string ""
        |> required "adminId" JD.int 0
        |> required "stamp" JD.int 0
        |> required "locationId" JD.int 0


transactionEncoder : Transaction -> JE.Value
transactionEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "id" JE.int 0 v.id)
        , (requiredFieldEncoder "kind" transactionKindEncoder transactionKindDefault v.kind)
        , (requiredFieldEncoder "subjectId" JE.int 0 v.subjectId)
        , (requiredFieldEncoder "subjectQuantity" JE.int 0 v.subjectQuantity)
        , (requiredFieldEncoder "amount" JE.int 0 v.amount)
        , (requiredFieldEncoder "cashIn" JE.int 0 v.cashIn)
        , (requiredFieldEncoder "cashOut" JE.int 0 v.cashOut)
        , (requiredFieldEncoder "description" JE.string "" v.description)
        , (requiredFieldEncoder "adminId" JE.int 0 v.adminId)
        , (requiredFieldEncoder "stamp" JE.int 0 v.stamp)
        , (requiredFieldEncoder "locationId" JE.int 0 v.locationId)
        ]


type alias Band =
    { id : Int -- 1
    , name : String -- 2
    , person : String -- 3
    , contacts : Maybe Contacts -- 4
    , kind : BandKind -- 5
    , description : String -- 6
    , balance : Int -- 7
    , adminId : Int -- 8
    , canOrder : Bool -- 9
    , enabled : Bool -- 10
    , stamp : Int -- 11
    }


bandDecoder : JD.Decoder Band
bandDecoder =
    JD.lazy <| \_ -> decode Band
        |> required "id" JD.int 0
        |> required "name" JD.string ""
        |> required "person" JD.string ""
        |> optional "contacts" contactsDecoder
        |> required "kind" bandKindDecoder bandKindDefault
        |> required "description" JD.string ""
        |> required "balance" JD.int 0
        |> required "adminId" JD.int 0
        |> required "canOrder" JD.bool False
        |> required "enabled" JD.bool False
        |> required "stamp" JD.int 0


bandEncoder : Band -> JE.Value
bandEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "id" JE.int 0 v.id)
        , (requiredFieldEncoder "name" JE.string "" v.name)
        , (requiredFieldEncoder "person" JE.string "" v.person)
        , (optionalEncoder "contacts" contactsEncoder v.contacts)
        , (requiredFieldEncoder "kind" bandKindEncoder bandKindDefault v.kind)
        , (requiredFieldEncoder "description" JE.string "" v.description)
        , (requiredFieldEncoder "balance" JE.int 0 v.balance)
        , (requiredFieldEncoder "adminId" JE.int 0 v.adminId)
        , (requiredFieldEncoder "canOrder" JE.bool False v.canOrder)
        , (requiredFieldEncoder "enabled" JE.bool False v.enabled)
        , (requiredFieldEncoder "stamp" JE.int 0 v.stamp)
        ]


type alias Session =
    { id : Int -- 1
    , timeFrom : Int -- 2
    , timeTo : Int -- 3
    , weekDay : WeekDay -- 4
    , roomId : Int -- 5
    , instrumentsIds : List Int -- 6
    , bandId : Int -- 7
    , callback : Bool -- 8
    , status : SessionStatus -- 9
    , amount : Int -- 10
    , description : String -- 11
    , orderedBy : SessionOrderedBy -- 12
    , adminIdOpen : Int -- 13
    , adminIdClose : Int -- 14
    , transactionId : Int -- 15
    , stamp : Int -- 16
    , price : Int -- 17
    }


sessionDecoder : JD.Decoder Session
sessionDecoder =
    JD.lazy <| \_ -> decode Session
        |> required "id" JD.int 0
        |> required "timeFrom" JD.int 0
        |> required "timeTo" JD.int 0
        |> required "weekDay" weekDayDecoder weekDayDefault
        |> required "roomId" JD.int 0
        |> repeated "instrumentsIds" JD.int
        |> required "bandId" JD.int 0
        |> required "callback" JD.bool False
        |> required "status" sessionStatusDecoder sessionStatusDefault
        |> required "amount" JD.int 0
        |> required "description" JD.string ""
        |> required "orderedBy" sessionOrderedByDecoder sessionOrderedByDefault
        |> required "adminIdOpen" JD.int 0
        |> required "adminIdClose" JD.int 0
        |> required "transactionId" JD.int 0
        |> required "stamp" JD.int 0
        |> required "price" JD.int 0


sessionEncoder : Session -> JE.Value
sessionEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "id" JE.int 0 v.id)
        , (requiredFieldEncoder "timeFrom" JE.int 0 v.timeFrom)
        , (requiredFieldEncoder "timeTo" JE.int 0 v.timeTo)
        , (requiredFieldEncoder "weekDay" weekDayEncoder weekDayDefault v.weekDay)
        , (requiredFieldEncoder "roomId" JE.int 0 v.roomId)
        , (repeatedFieldEncoder "instrumentsIds" JE.int v.instrumentsIds)
        , (requiredFieldEncoder "bandId" JE.int 0 v.bandId)
        , (requiredFieldEncoder "callback" JE.bool False v.callback)
        , (requiredFieldEncoder "status" sessionStatusEncoder sessionStatusDefault v.status)
        , (requiredFieldEncoder "amount" JE.int 0 v.amount)
        , (requiredFieldEncoder "description" JE.string "" v.description)
        , (requiredFieldEncoder "orderedBy" sessionOrderedByEncoder sessionOrderedByDefault v.orderedBy)
        , (requiredFieldEncoder "adminIdOpen" JE.int 0 v.adminIdOpen)
        , (requiredFieldEncoder "adminIdClose" JE.int 0 v.adminIdClose)
        , (requiredFieldEncoder "transactionId" JE.int 0 v.transactionId)
        , (requiredFieldEncoder "stamp" JE.int 0 v.stamp)
        , (requiredFieldEncoder "price" JE.int 0 v.price)
        ]


type alias SessionTemplate =
    { id : Int -- 1
    , minFrom : Int -- 2
    , minTo : Int -- 3
    , weekDay : WeekDay -- 4
    , roomId : Int -- 5
    , instrumentsIds : List Int -- 6
    , bandId : Int -- 7
    , description : String -- 8
    , adminId : Int -- 9
    , enabled : Bool -- 10
    , stamp : Int -- 11
    , activeFrom : Int -- 12
    }


sessionTemplateDecoder : JD.Decoder SessionTemplate
sessionTemplateDecoder =
    JD.lazy <| \_ -> decode SessionTemplate
        |> required "id" JD.int 0
        |> required "minFrom" JD.int 0
        |> required "minTo" JD.int 0
        |> required "weekDay" weekDayDecoder weekDayDefault
        |> required "roomId" JD.int 0
        |> repeated "instrumentsIds" JD.int
        |> required "bandId" JD.int 0
        |> required "description" JD.string ""
        |> required "adminId" JD.int 0
        |> required "enabled" JD.bool False
        |> required "stamp" JD.int 0
        |> required "activeFrom" JD.int 0


sessionTemplateEncoder : SessionTemplate -> JE.Value
sessionTemplateEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "id" JE.int 0 v.id)
        , (requiredFieldEncoder "minFrom" JE.int 0 v.minFrom)
        , (requiredFieldEncoder "minTo" JE.int 0 v.minTo)
        , (requiredFieldEncoder "weekDay" weekDayEncoder weekDayDefault v.weekDay)
        , (requiredFieldEncoder "roomId" JE.int 0 v.roomId)
        , (repeatedFieldEncoder "instrumentsIds" JE.int v.instrumentsIds)
        , (requiredFieldEncoder "bandId" JE.int 0 v.bandId)
        , (requiredFieldEncoder "description" JE.string "" v.description)
        , (requiredFieldEncoder "adminId" JE.int 0 v.adminId)
        , (requiredFieldEncoder "enabled" JE.bool False v.enabled)
        , (requiredFieldEncoder "stamp" JE.int 0 v.stamp)
        , (requiredFieldEncoder "activeFrom" JE.int 0 v.activeFrom)
        ]


type alias FullState =
    { hash : String -- 1
    , admins : List Admin -- 2
    , locations : List Location -- 3
    , rooms : List Room -- 4
    , discountConst : List DiscountConst -- 5
    , instruments : List Instrument -- 6
    , stuff2Sell : List Stuff2Sell -- 7
    , transactions : List Transaction -- 8
    , bands : List Band -- 9
    , sessions : List Session -- 10
    , sessionsTemplate : List SessionTemplate -- 11
    }


fullStateDecoder : JD.Decoder FullState
fullStateDecoder =
    JD.lazy <| \_ -> decode FullState
        |> required "hash" JD.string ""
        |> repeated "admins" adminDecoder
        |> repeated "locations" locationDecoder
        |> repeated "rooms" roomDecoder
        |> repeated "discountConst" discountConstDecoder
        |> repeated "instruments" instrumentDecoder
        |> repeated "stuff2sell" stuff2SellDecoder
        |> repeated "transactions" transactionDecoder
        |> repeated "bands" bandDecoder
        |> repeated "sessions" sessionDecoder
        |> repeated "sessionsTemplate" sessionTemplateDecoder


fullStateEncoder : FullState -> JE.Value
fullStateEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "hash" JE.string "" v.hash)
        , (repeatedFieldEncoder "admins" adminEncoder v.admins)
        , (repeatedFieldEncoder "locations" locationEncoder v.locations)
        , (repeatedFieldEncoder "rooms" roomEncoder v.rooms)
        , (repeatedFieldEncoder "discountConst" discountConstEncoder v.discountConst)
        , (repeatedFieldEncoder "instruments" instrumentEncoder v.instruments)
        , (repeatedFieldEncoder "stuff2sell" stuff2SellEncoder v.stuff2Sell)
        , (repeatedFieldEncoder "transactions" transactionEncoder v.transactions)
        , (repeatedFieldEncoder "bands" bandEncoder v.bands)
        , (repeatedFieldEncoder "sessions" sessionEncoder v.sessions)
        , (repeatedFieldEncoder "sessionsTemplate" sessionTemplateEncoder v.sessionsTemplate)
        ]


type alias Statistics =
    { cashPrices : Int -- 1
    , cashInput : Int -- 2
    , sessionsAll : Int -- 3
    , sessionsOpened : Int -- 4
    , sessionsClosed : Int -- 5
    , sessionsCancelSoft : Int -- 6
    , sessionsCancelHard : Int -- 7
    , transactionsCashPrices : Int -- 8
    , transactionsCashInput : Int -- 9
    , allCashPrices : Int -- 10
    , allCashInput : Int -- 11
    }


statisticsDecoder : JD.Decoder Statistics
statisticsDecoder =
    JD.lazy <| \_ -> decode Statistics
        |> required "cashPrices" JD.int 0
        |> required "cashInput" JD.int 0
        |> required "sessionsAll" JD.int 0
        |> required "sessionsOpened" JD.int 0
        |> required "sessionsClosed" JD.int 0
        |> required "sessionsCancelSoft" JD.int 0
        |> required "sessionsCancelHard" JD.int 0
        |> required "transactionsCashPrices" JD.int 0
        |> required "transactionsCashInput" JD.int 0
        |> required "allCashPrices" JD.int 0
        |> required "allCashInput" JD.int 0


statisticsEncoder : Statistics -> JE.Value
statisticsEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "cashPrices" JE.int 0 v.cashPrices)
        , (requiredFieldEncoder "cashInput" JE.int 0 v.cashInput)
        , (requiredFieldEncoder "sessionsAll" JE.int 0 v.sessionsAll)
        , (requiredFieldEncoder "sessionsOpened" JE.int 0 v.sessionsOpened)
        , (requiredFieldEncoder "sessionsClosed" JE.int 0 v.sessionsClosed)
        , (requiredFieldEncoder "sessionsCancelSoft" JE.int 0 v.sessionsCancelSoft)
        , (requiredFieldEncoder "sessionsCancelHard" JE.int 0 v.sessionsCancelHard)
        , (requiredFieldEncoder "transactionsCashPrices" JE.int 0 v.transactionsCashPrices)
        , (requiredFieldEncoder "transactionsCashInput" JE.int 0 v.transactionsCashInput)
        , (requiredFieldEncoder "allCashPrices" JE.int 0 v.allCashPrices)
        , (requiredFieldEncoder "allCashInput" JE.int 0 v.allCashInput)
        ]


type alias StatisticsRequest =
    { timeFrom : Int -- 1
    , timeTo : Int -- 2
    , locationId : Int -- 3
    , roomId : Int -- 4
    }


statisticsRequestDecoder : JD.Decoder StatisticsRequest
statisticsRequestDecoder =
    JD.lazy <| \_ -> decode StatisticsRequest
        |> required "timeFrom" JD.int 0
        |> required "timeTo" JD.int 0
        |> required "locationId" JD.int 0
        |> required "roomId" JD.int 0


statisticsRequestEncoder : StatisticsRequest -> JE.Value
statisticsRequestEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "timeFrom" JE.int 0 v.timeFrom)
        , (requiredFieldEncoder "timeTo" JE.int 0 v.timeTo)
        , (requiredFieldEncoder "locationId" JE.int 0 v.locationId)
        , (requiredFieldEncoder "roomId" JE.int 0 v.roomId)
        ]


type alias Request =
    { cmd : CMD -- 1
    , clientKind : ClientKind -- 2
    , login : String -- 3
    , password : String -- 4
    , subject : Maybe FullState -- 5
    , statistics : Maybe StatisticsRequest -- 6
    }


requestDecoder : JD.Decoder Request
requestDecoder =
    JD.lazy <| \_ -> decode Request
        |> required "cmd" cMDDecoder cMDDefault
        |> required "clientKind" clientKindDecoder clientKindDefault
        |> required "login" JD.string ""
        |> required "password" JD.string ""
        |> optional "subject" fullStateDecoder
        |> optional "statistics" statisticsRequestDecoder


requestEncoder : Request -> JE.Value
requestEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "cmd" cMDEncoder cMDDefault v.cmd)
        , (requiredFieldEncoder "clientKind" clientKindEncoder clientKindDefault v.clientKind)
        , (requiredFieldEncoder "login" JE.string "" v.login)
        , (requiredFieldEncoder "password" JE.string "" v.password)
        , (optionalEncoder "subject" fullStateEncoder v.subject)
        , (optionalEncoder "statistics" statisticsRequestEncoder v.statistics)
        ]


type alias Response =
    { status : ResponseStatus -- 1
    , message : String -- 2
    , state : Maybe FullState -- 3
    , statistics : Maybe Statistics -- 4
    , destinationLocationId : List Int -- 5
    }


responseDecoder : JD.Decoder Response
responseDecoder =
    JD.lazy <| \_ -> decode Response
        |> required "status" responseStatusDecoder responseStatusDefault
        |> required "message" JD.string ""
        |> optional "state" fullStateDecoder
        |> optional "statistics" statisticsDecoder
        |> repeated "destinationLocationId" JD.int


responseEncoder : Response -> JE.Value
responseEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "status" responseStatusEncoder responseStatusDefault v.status)
        , (requiredFieldEncoder "message" JE.string "" v.message)
        , (optionalEncoder "state" fullStateEncoder v.state)
        , (optionalEncoder "statistics" statisticsEncoder v.statistics)
        , (repeatedFieldEncoder "destinationLocationId" JE.int v.destinationLocationId)
        ]
